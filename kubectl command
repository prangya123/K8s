>>>List all the nodes in the cluster.
kubectl get nodes

>>>List all the pods in all namespaces.
kubectl get pods --all-namespaces

>>>List all the namespaces in the cluster.
kubectl get namespaces


>>>Check to see if there are any pods running in the default namespace.
kubectl get pods

>>>Find the IP address of the API server running on the master node.
kubectl get pods --all-namespaces -o wide
kubectl get pods --all-namespaces -o wide|awk '{print $7}'

>>>See if there are any deployments in this cluster.
kubectl get deployments

>>>Find the label applied to the etcd pod on the master node.
kubectl get pods --all-namespaces --show-labels -o wide


To prevent unauthorized users from modifying the cluster state, RBAC is used, defining roles and role bindings for a user. A service account resource is created for a pod to determine how it has control over the cluster state. For example, the default service account will not allow you to list the services in a namespace.

>>>View the kube-config:
cat .kube/config | more

>>>View the service account token:
kubectl get secrets

>>>Create a new namespace named my-ns:
kubectl create ns my-ns

>>>Run the kube-proxy pod in the my-ns namespace:
kubectl run test --image=chadmcrowell/kubectl-proxy -n my-ns

>>>List the pods in the my-ns namespace:
kubectl get pods -n my-ns

>>>Run a shell in the newly created pod:
kubectl exec -it <name-of-pod> -n my-ns sh

>>>List the services in the namespace via API call:
curl localhost:8001/api/v1/namespaces/my-ns/services

>>>View the token file from within a pod:
cat /var/run/secrets/kubernetes.io/serviceaccount/token

>>List the service account resources in your cluster:
kubectl get serviceaccounts

Running end-to-end tests ensures your application will run efficiently without having to worry about cluster health problems. Kubetest is a useful tool for providing end-to-end tests â€” however, it is beyond the scope of this exam. In this lesson, we will go through the practice of testing our ability to run deployments, run pods, expose a container, execute a command from a container, run a service, and check the overall health of our nodes and pods for conditions.

>>>Run a simple nginx deployment:
kubectl run nginx --image=nginx

>>>View the deployments in your cluster:
kubectl get deployments

>>>View the pods in the cluster:
kubectl get pods

>>>Use port forwarding to access a pod directly:
kubectl port-forward $pod_name 8081:80

>>>Get a response from the nginx pod directly:
curl --head http://127.0.0.1:8081

>>>View the logs from a pod:
kubectl logs $pod_name

>>>Run a command directly from the container:
kubectl exec -it $pod_name -- nginx -v

>>>Create a service by exposing port 80 of the nginx deployment:
kubectl expose deployment nginx --port 80 --type NodePort

>>>List the services in your cluster:
kubectl get services

>>>Get a response from the service:
curl -I localhost:$node_port

>>>List the nodes' status:
kubectl get nodes

>>>View detailed information about the nodes:
kubectl describe nodes

>>>View detailed information about the pods:
kubectl describe pods
